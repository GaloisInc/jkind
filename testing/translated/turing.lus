node main(

) returns (
  left : int;
  right : int;
  head : int
);
var
  write : int;
  move : move;
  state : state;
  cex : bool;
let
  left = (0 -> (if ((pre state) = 0) then (pre left) else (if (move = 0) then ((pre left) div 10) else ((10 * (pre left)) + write))));

  head = (0 -> (if ((pre state) = 0) then (pre head) else (if (move = 0) then ((pre left) mod 10) else ((pre right) mod 10))));

  right = (0 -> (if ((pre state) = 0) then (pre right) else (if (move = 0) then ((10 * (pre right)) + write) else ((pre right) div 10))));

  write = (0 -> (if (((pre state) = 1) and ((pre head) = 0)) then 1 else (if (((pre state) = 1) and ((pre head) = 1)) then 1 else (if (((pre state) = 2) and ((pre head) = 0)) then 1 else (if (((pre state) = 2) and ((pre head) = 1)) then 0 else (if (((pre state) = 3) and ((pre head) = 0)) then 1 else (if (((pre state) = 3) and ((pre head) = 1)) then 1 else (if (((pre state) = 4) and ((pre head) = 0)) then 1 else (if (((pre state) = 4) and ((pre head) = 1)) then 0 else 0)))))))));

  move = (0 -> (if (((pre state) = 1) and ((pre head) = 0)) then 1 else (if (((pre state) = 1) and ((pre head) = 1)) then 0 else (if (((pre state) = 2) and ((pre head) = 0)) then 0 else (if (((pre state) = 2) and ((pre head) = 1)) then 0 else (if (((pre state) = 3) and ((pre head) = 0)) then 1 else (if (((pre state) = 3) and ((pre head) = 1)) then 0 else (if (((pre state) = 4) and ((pre head) = 0)) then 1 else (if (((pre state) = 4) and ((pre head) = 1)) then 1 else 0)))))))));

  state = (1 -> (if (((pre state) = 1) and ((pre head) = 0)) then 2 else (if (((pre state) = 1) and ((pre head) = 1)) then 2 else (if (((pre state) = 2) and ((pre head) = 0)) then 1 else (if (((pre state) = 2) and ((pre head) = 1)) then 3 else (if (((pre state) = 3) and ((pre head) = 0)) then 0 else (if (((pre state) = 3) and ((pre head) = 1)) then 4 else (if (((pre state) = 4) and ((pre head) = 0)) then 4 else (if (((pre state) = 4) and ((pre head) = 1)) then 1 else 0)))))))));

  cex = (state <> 0);

  --%PROPERTY cex;

tel;
