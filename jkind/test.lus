type Lst = induct {cons (head int) (tail Lst) | nil };

recursive positive (l : Lst) returns (res : bool);
let
  res = if (is_nil l) then true else (head l) >= 0 and (positive (tail l));
tel;

recursive sum (l : Lst) returns (res : int);
let
  res = if (is_nil l) then 0 else (head l) + (sum (tail l));
tel;

node main(input : int) returns();
var
  prop1 : bool;
  prop2 : bool;
  acc : Lst;
let
  acc = if (input > 0) then (cons input (nil -> (pre acc))) else (nil -> pre acc);
  prop1 = (positive acc);
  prop2 = (sum acc) >= 0;
  --%PROPERTY prop1;
  --%PROPERTY prop2;
tel;