type Lst = induct {cons (head int) (tail Lst) | nil };

recursive mem (x : int; l : Lst) returns (res : bool);
let
  res = if (is_nil l) then false
        else if (head l) = x then true
	else (mem x (tail l));
tel;

recursive insert (x : int; xs : Lst) returns (ys : Lst);
let
  ys = if (is_nil xs) then (cons x nil)
       else if x < (head xs) then (cons x xs)
       else (cons (head xs) (insert x (tail xs)));
tel;

node main(input : int) returns();
var
  ok : bool;
  nums : Lst;
let
  nums = (insert input (nil -> pre nums));
  ok = not ((mem 0 nums) and (mem 1 nums));
  --%PROPERTY ok;
tel;
