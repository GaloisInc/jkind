type Lst = induct {cons (head int) (tail Lst) | nil };

recursive mem(x : int; l : Lst) returns (res : bool);
let
  res = if (is_nil l) then false
        else if (head l) = x then true
	else (mem x (tail l));
tel;

recursive ins(x : int; xs : Lst) returns (ys : Lst);
let
  ys = if (is_nil xs) then (cons x nil)
       else if x < (head xs) then (cons x xs)
       else (cons (head xs) (ins x (tail xs)));
tel;

-- recursive sorted(xs : Lst) returns (res : bool);
-- let
--   res = if (is_nil xs) then true
--         else if (is_nil (tail xs)) then true
--         else (head xs) <= (head (tail xs)) and (sorted (tail xs));
-- tel;

recursive sorted2(x : int; xs : Lst) returns (res : bool);
let
  res = if (is_nil xs) then true
        else x <= (head xs) and (sorted2 x (tail xs));
tel;

recursive sorted(xs : Lst) returns (res : bool);
let
  res = if (is_nil xs) then true else (sorted2 (head xs) (tail xs));
tel;

node main(input : int) returns();
var
  ok : bool;
  nums : Lst;
let
  nums = (ins input (nil -> pre nums));
  ok = (mem (ins nums));
  --%PROPERTY ok;
tel;
