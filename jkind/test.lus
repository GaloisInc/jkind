type Lst = induct {cons (head int) (tail Lst) | nil };

recursive app(l1 : Lst; l2 : Lst) returns (res : Lst);
let
  res = if (is_nil l1) then l2 else (cons (head l1) (app (tail l1) l2));
tel;

recursive rev(l : Lst) returns (res : Lst);
let
  res = if (is_nil l) then nil else (app (rev (tail l)) (cons (head l) nil));
tel;

node main() returns();
var
  ok1 : bool;
  ok2 : bool;
  ok3 : bool;
let
  ok1 = forall (l1 : Lst; l2 : Lst; l3 : Lst) . (app l1 (app l2 l3)) = (app (app l1 l2) l3);
  ok2 = forall (l1 : Lst; l2 : Lst) . (rev (app l1 l2)) = (app (rev l2) (rev l1));
  ok3 = forall (l1 : Lst) . (rev l1) = l1;
  --%PROPERTY ok1;
  --%PROPERTY ok3;
  --%PROPERTY ok2;
tel;
