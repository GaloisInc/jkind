type Lst = induct {cons (head int) (tail Lst) | nil };

recursive app(l1 : Lst; l2 : Lst) returns (res : Lst);
let
  res = if (is_nil l1) then l2 else (cons (head l1) (app (tail l1) l2));
tel;

recursive rev(l : Lst) returns (res : Lst);
let
  res = if (is_nil l) then nil else (app (rev (tail l)) (cons (head l) nil));
tel;

recursive pos(l : Lst) returns (res : bool);
let
  res = if (is_nil l) then true else if (head l) < 0 then false else (pos (tail l));
tel;

node main(i : int) returns();
var
  l : Lst;
  ipos : bool;
  prop : bool;
let
  l = (cons i nil) -> (cons i (pre l));
  ipos = i >= 0 and (true -> pre ipos);
  prop = ipos => forall (k : Lst) . k = l => (pos k);
  --%PROPERTY prop;
tel;
